#!/bin/bash

#
# This file should be sourced by calling scripts, to define the common-use
# base functions we can leverage on all shell scripts, all over the place
#

#
# usage: timestamp
#
# Outputs the current system time in UTC, using ISO-8601
# format with nanosecond resolution
#
timestamp()
{
	/usr/bin/date -Ins -u
}

#
# usage: say [args ...]
#
# Output a message to stdout, preceded by a timestamp
#
say()
{
	echo -e "$(timestamp): ${@}"
}

#
# These functions are just for prettyness and convenience :)
#

doing()
{
	say "üëâ ${@}"
}

ok()
{
	say "‚úÖ ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}"
}

waiting()
{
	say "‚è≥ ${@}"
}

sleeping()
{
	say "üí§ ${@}"
}

running()
{
	say "üöÄ ${@}"
}

eyes()
{
	say "üëÄ ${@}"
}

#
# usage: [EXIT_VALUE=X] fail [args ...]
#
# End processing (via a call to exit) with the exit code
# V (default is 1 if not specified), and outputting
# the given message using the err function.
#
fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

#
# usage: quit [args ...]
#
# End processing (via a call to exit) with the exit code
# 0, and outputting the given message using the err function.
#
quit()
{
	say "üö™ ${@}"
	exit 0
}

#
# usage: declare_base_vars
#
# Declares some base-use variables:
#
#	- __BASEDIR = the directory where the currently-executing script resides
#	- __SCRIPT = the filename for the currently-executing script
#
define_base_vars()
{
	local __SCRIPT="${1:-${BASH_ARGV0:-${BASH_SOURCE:-${0}}}}"
	__SCRIPT="$(readlink -f "${__SCRIPT}")"
	declare -gx __BASEDIR="$(dirname "${__SCRIPT}")"
	declare -gx __SCRIPT="$(basename "${__SCRIPT}")"
}

#
# usage: is_dir DIR
#
# Checks to see if the directory exists, is a directory,
# and is executable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a directory
#	4 = is not executable
#
is_dir()
{
	local __DIR="${1}"
	[ -n "${__DIR}" ] || return 1
	[ -e "${__DIR}" ] || return 2
	[ -d "${__DIR}" ] || return 3
	[ -x "${__DIR}" ] || return 4
	return 0
}

#
# usage: is_dir_readable DIR
#
# Checks to see if the directory exists (as per is_dir),
# and is readable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a directory
#	4 = is not executable
#	5 = is not readable
#
is_dir_readable()
{
	local __DIR="${1}"
	is_dir "${__DIR}" || return ${?}
	[ -r "${__DIR}" ] || return 5
	return 0
}

#
# usage: is_dir_writable DIR
#
# Checks to see if the directory exists (as per is_dir),
# and is writable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a directory
#	4 = is not executable
#	6 = is not writable
#
is_dir_writable()
{
	local __DIR="${1}"
	is_dir "${__DIR}" || return ${?}
	[ -w "${__DIR}" ] || return 6
	return 0
}

#
# usage: is_dir_readwrite DIR
#
# Checks to see if the directory exists (as per is_dir),
# and is readable AND writable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a directory
#	4 = is not executable
#	5 = is not readable
#	6 = is not writable
#
is_dir_readwrite()
{
	local __DIR="${1}"
	is_dir "${__DIR}" || return ${?}
	[ -r "${__DIR}" ] || return 5
	[ -w "${__DIR}" ] || return 6
	return 0
}

#
# usage: render_dir_error DIR CODE
#
# Generates an error message corresponding to the error code
# as returned by the is_dir function family. This exists
# for convenience when reporting issues.
#
dir_error()
{
	local __DIR="${1}"
	local __CODE="${2}"
	local __MSG=""
	case "${__CODE}" in
		0 ) ;;
		1 ) __MSG="The directory name may not be the empty string" ;;
		2 ) __MSG="The directory [${__DIR}] does not exist" ;;
		3 ) __MSG="The path [${__DIR}] is not a directory" ;;
		4 ) __MSG="The directory [${__DIR}] is not executable" ;;
		5 ) __MSG="The directory [${__DIR}] is not readable" ;;
		6 ) __MSG="The directory [${__DIR}] is not writable" ;;
		* ) __MSG="Unknown error code [${__CODE}] when examining directory [${__DIR}]" ;;
	esac
	[ -n "${__MSG}" ] && err "${__MSG}"
}
#
# usage: fail_dir DIR CODE
#
# Exit the current script (as when calling fail), but
# render an error message corresponding to the exit code
# of a function in the is_dir family
#
fail_dir()
{
	local __DIR="${1}"
	local __CODE="${2}"
	local __MSG="$(dir_error "${__DIR}" "${__CODE}")"

	echo -e "${__MSG}"
	exit ${EXIT_CODE:-1}
}

#
# usage: ensure_dir DIR
#
# Make sure the directory exists, and is both
# readable and writable, or create it, along
# with any missing parent paths as needed.
#
# Returns 0 if DIR exists after the call, or
# exits the script with a non-0 status and an
# error message otherwise.
#
ensure_dir()
{
	local __DIR="${1}"

	is_dir_readwrite "${__DIR}" && return 0

	mkdir -p "${__DIR}" || fail "The directory [${__DIR}] did not exist and could not be created"
}

__require_dir()
{
	local __FUNC="${1}"
	local __DIR="${2}"
	[ -n "${__FUNC}" ] && __FUNC="_${__FUNC}"
	"is_dir${__FUNC}" "${__DIR}" || fail_dir "${__DIR}" "${?}"
}

#
# usage: require_dir DIR
#
# Check if the directory exists, and exit
# the script with a non-0 exit status and an
# error message if it is not.
#
require_dir()
{
	__require_dir "" "${@}"
}

#
# usage: require_dir_readable DIR
#
# Check if the directory exists and is
# readable, and exit the script with a
# non-0 exit status and an error message
# if it is not.
#
require_dir_readable()
{
	__require_dir readable "${@}"
}

#
# usage: require_dir_writable DIR
#
# Check if the directory exists and is
# writable, and exit the script with a
# non-0 exit status and an error message
# if it is not.
#
require_dir_writable()
{
	__require_dir writable "${@}"
}

#
# usage: require_dir_readwrite DIR
#
# Check if the directory exists and is
# readable AND writable, and exit the
# script with a non-0 exit status and
# an error message if it is not.
#
require_dir_readwrite()
{
	__require_dir readwrite "${@}"
}

#
# usage: is_file FILE
#
# Checks to see if the file exists and is a regular file
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a file
#
is_file()
{
	local __FILE="${1}"
	[ -n "${__FILE}" ] || return 1
	[ -e "${__FILE}" ] || return 2
	[ -f "${__FILE}" ] || return 3
	return 0
}

#
# usage: is_file_readable FILE
#
# Checks to see if the file exists (as per is_file),
# and is readable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a file
#	4 = is not readable
#
is_file_readable()
{
	local __FILE="${1}"
	is_file "${__FILE}" || return ${?}
	[ -r "${__FILE}" ] || return 4
	return 0
}

#
# usage: is_file_writable FILE
#
# Checks to see if the file exists (as per is_file),
# and is writable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a file
#	5 = is not writable
#
is_file_writable()
{
	local __FILE="${1}"
	is_file "${__FILE}" || return ${?}
	[ -w "${__FILE}" ] || return 5
	return 0
}

#
# usage: is_file_readwrite FILE
#
# Checks to see if the file exists (as per is_file),
# and is readable AND writable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a file
#	4 = is not readable
#	5 = is not writable
#
is_file_readwrite()
{
	local __FILE="${1}"
	is_file "${__FILE}" || return ${?}
	[ -r "${__FILE}" ] || return 3
	[ -w "${__FILE}" ] || return 4
	return 0
}

#
# usage: is_file_executable FILE
#
# Checks to see if the file exists and is
# readable (as per is_file), and is
# executable by the current user.
#
# The return values are:
#
#	0 = success
#	1 = empty string given
#	2 = does not exist
#	3 = is not a file
#	4 = is not readable
#	6 = is not executable
#
is_file_executable()
{
	local __FILE="${1}"
	is_file_readable "${__FILE}" || return ${?}
	[ -x "${__FILE}" ] || return 5
	return 0
}

#
# usage: file_error FILE CODE
#
# Generates an error message corresponding to the error code
# as returned by the is_file function family. This exists
# for convenience when reporting issues.
#
file_error()
{
	local __FILE="${1}"
	local __CODE="${2}"
	local __MSG=""
	case "${__CODE}" in
		0 ) ;;
		1 ) __MSG="The file name may not be the empty string" ;;
		2 ) __MSG="The file [${__FILE}] does not exist" ;;
		3 ) __MSG="The path [${__FILE}] is not a regular file" ;;
		4 ) __MSG="The file [${__FILE}] is not readable" ;;
		5 ) __MSG="The file [${__FILE}] is not writable" ;;
		6 ) __MSG="The file [${__FILE}] is not executable" ;;
		* ) __MSG="Unknown error code [${__CODE}] when examining file [${__FILE}]" ;;
	esac
	[ -n "${__MSG}" ] && err "${__MSG}"
}

#
# usage: fail_file FILE CODE
#
# Exit the current script (as when calling fail), but
# render an error message corresponding to the exit code
# of a function in the is_file family
#
fail_file()
{
	local __FILE="${1}"
	local __CODE="${2}"
	local __MSG="$(file_error "${__FILE}" "${__CODE}")"

	echo -e "${__MSG}"
	exit ${EXIT_CODE:-1}
}

__require_file()
{
	local __FUNC="${1}"
	local __FILE="${2}"
	[ -n "${__FUNC}" ] && __FUNC="_${__FUNC}"
	"is_file${__FUNC}" "${__FILE}" || fail_file "${__FILE}" "${?}"
}

#
# usage: require_file FILE
#
# Check if the file exists, and exit
# the script with a non-0 exit status and an
# error message if it is not.
#
require_file()
{
	__require_file "" "${@}"
}

#
# usage: require_file_readable FILE
#
# Check if the file exists and is
# readable, and exit the script with a
# non-0 exit status and an error message
# if it is not.
#
require_file_readable()
{
	__require_file readable "${@}"
}

#
# usage: require_file_writable FILE
#
# Check if the file exists and is
# writable, and exit the script with a
# non-0 exit status and an error message
# if it is not.
#
require_file_writable()
{
	__require_file writable "${@}"
}

#
# usage: require_file_readwrite FILE
#
# Check if the file exists and is
# readable AND writable, and exit the
# script with a non-0 exit status and
# an error message if it is not.
#
require_file_readwrite()
{
	__require_file readwrite "${@}"
}

#
# usage: require_file_executable FILE
#
# Check if the file exists and is
# executable, and exit the
# script with a non-0 exit status and
# an error message if it is not.
#
require_file_executable()
{
	__require_file executable "${@}"
}

#
# usage: is_help_flag "${@}"
#
# Returns a 0 return value if an help flag has been
# provided in the given parameter list, or a non-0
# return value otherwise.
#
# The help flags are the strings "-?", "-h", and "--help"
#
is_help_flag()
{
	local __n=""
	for __n in "${@}" ; do
		case "${__n}" in
			"-?" | "-h" | "--help" ) return 0 ;;
			* ) ;;
		esac
	done
	return 1
}

#
# usage: as_boolean VALUE
#
# Checks to see if VALUE is a boolean-equivalent of a
# true-value. The following strings are interpreted
# as true-value equivalents (case-insensitive):
#
#	"true"
#	"t"
#	"yes"
#	"y"
#	"enable"
#	"enabled"
#	"on"
#
# Non-zero number strings are also interpreted as true-values.
#
# If value is a true-equivalent, the return value
# is 0, otherwise it will be non-0.
#
as_boolean()
{
	local __V="${1:-""}"

	# Is this a known true-equivalent string?
	case "${__V,,}" in
		true | t | yes | y | enable | enabled | on ) return 0 ;;
	esac

	# Is it a non-zero number?
	[[ "${__V}" =~ ^-?[1-9][0-9]*$ ]] && [ ${__V} -ne 0 ] && return 0

	# Then this is certainly a false-value
	return 1
}

#
# usage: to_boolean VALUE
#
# Checks to see if VALUE is a boolean (as per as_boolean),
# and outputs "true" if its a true-value, or "false" if it's
# a false-value
#
to_boolean()
{
	local __V="false"
	as_boolean "${@}" && __V="true"
	echo -n "${__V}"
	return 0
}

__get_var_flags()
{
	local __VAR="${1}"
	local __DECL="$(declare -p "${__VAR}" 2>/dev/null)" || return 1
	local __RE="^declare -(-|([aAfFiIlnrtux]+)) ${__VAR}"
	[[ "${__DECL}" =~ ${__RE} ]] && echo -n "${BASH_REMATCH[2]}"
	return 0
}

#
# usage: is_array VAR
#
# Checks to see if the given variable is an array (indexed
# or associative) and returns 0 if it is, or non-0 otherwise.
#
is_array()
{
	local __VAR="${1}"
	case "$(__get_var_flags "${__VAR}")" in
		*a* | *A* ) return 0 ;;
	esac
	return 1
}

#
# usage: to_list OUTPUT
#
# Outputs the variable's contents as a list, one per line,
# ready for conversion into an array. If the variable is
# already an array, it's iterated over and each element
# is output on its own line.
#
to_list()
{
	# This trick allows us to respect quotes
	/usr/bin/xargs -n1 < <(echo -n "${@}")
}

#
# usage: csv_to_list < OUTPUT
#
csv_to_list()
{
	tr ',' '\n' | sed -e '/^\s*$/d'
}

#
# usage: to_array VAR
#
# Convert the given variable into an array, split on
# spaces, and respecting quotes (single and double).
#
to_array()
{
	local __VAR="${1}"
	local __EXPORT="false"
	case "$(__get_var_flags "${__VAR}")" in
		# Ignore arrays and read-only variables
		*a* | *A* ) return 0 ;;
		*r* ) return 1 ;;

		# If it's an exported variable, keep track of it
		*x* ) __EXPORT="true" ;;
	esac

	if [ -v "${__VAR}" ] ; then
		# Do the conversion
		local __V="${!__VAR}"
		# Empty strings should convert to empty arrays
		if [ -n "${__V}" ] ; then
			# This will yield a non-empty array
			readarray -t "${__VAR}" < <(to_list "${!__VAR}")
		else
			# Make sure it's an empty array
			unset "${__VAR}"
			declare -ga "${__VAR}"
		fi
		# Restore the export flag
		"${__EXPORT}" && declare -x "${__VAR}"
	else
		# Do the declaration
		declare -ga "${__VAR}"
	fi
	return 0
}

__var_set_tool()
{
	[ ${#} -ge 2 ] || return 1
	local __FUNC="${1}"
	shift

	local __VAR="${1}"

	[[ "${__VAR}" =~ ^[a-zA-Z0-9_]+$ ]] || fail "Invalid variable name [${__VAR}]"

	local __X=""
	local __RESULT=""

	if [ -v "${__VAR}" ] ; then
		__RESULT="${!__VAR}" &>/dev/null || fail "Invalid variable name [${__VAR}]"

		# Identify if this is one of the types of variables
		# that we have problems with
		case "$(__get_var_flags "${__VAR}")" in
			# Ignore arrays and read-only variables
			*a* | *A* | *r* ) return 0 ;;
			*x* ) __X="x" ;;
		esac
	fi

	# No value or an empty one? Use the alternate default
	if [ -z "${__RESULT}" ] ; then
		if [ ${#} -ge 2 ] ; then
			__RESULT="${2}"
		else
			# No express default given... is there
			# a default value for this variable?
			local __DEFAULT="DEFAULT_${__VAR}"
			[ -v "${__DEFAULT}" ] && __RESULT="${!__DEFAULT}"
		fi
	fi

	# If we've been given a function to process the result
	# before we return it, we use it
	[ -n "${__FUNC}" ] && __RESULT="$("${__FUNC}" "${__RESULT}")"

	# Declare it, keeping its export status!
	declare -g${__X} ${__VAR}="${__RESULT}"
}

#
# usage: set_or_default VAR [DEFAULT]
#
# Ensures that the variable VAR has a value assigned.
#
# If the variable VAR is undefined or has an empty value, it will
# be set using the value DEFAULT, or the empty string if it wasn't
# provided. The variable's attributes (i.e. export, uppercase,
# lowercase, etc.) will be preserved if it's already been declared.
#
# Read-only variables and arrays of any kind will be ignored, and
# all variables declared will be global in the script's scope.
#
set_or_default()
{
	__var_set_tool "" "${@}"
}

#
# usage: set_as_boolean VAR [DEFAULT]
#
# Similar to set_or_default, but the final value for the
# variable may only be either "true" or "false"
#
set_as_boolean()
{
	__var_set_tool to_boolean "${@}"
}

#
# usage: require_exe EXE
#
# Checkes for the existence of the given executables. If an executable
# name doesn't contain any slashes, it checks the PATH (using type -P).
#
# If an executable name contains slashes, then it must exist in that
# exact location, be a regular file, and both readable and executable
# (as per is_file_executable).
#
require_exe()
{
	[ ${#} -ge 1 ] || return 0

	local __EXE=""
	for __EXE in "${@}" ; do
		if [[ "${__EXE}" =~ / ]] ; then
			local __RC=0
			is_file_executable "${__EXE}" || __RC=${?}
			[ ${__RC} -eq 0 ] && continue
			file_error "${__EXE}" "${__RC}"
			exit 1
		else
			type -P "${__EXE}" &>/dev/null || fail "Could not find the required executable [${__EXE}] in the PATH"
		fi
	done

	return 0
}

#
# usage: __get_time_mul (D|H|M|S)
#
# Return the number of seconds in the given time
# scale:
#
#	 D = days = 86,400
#	 H = hours = 3,600
#	 M = minutes = 60
#	 S = seconds = 1
#
# This is a utility function used by the timestring
# conversion functions
#
__get_time_mul()
{
	local __TAG="${1^^}"

	[[ "${__TAG}" =~ ^[HDMS]$ ]] || return 1
	local __DURATION_S=1
	local __DURATION_M=$(( __DURATION_S * 60 ))
	local __DURATION_H=$(( __DURATION_M * 60 ))
	local __DURATION_D=$(( __DURATION_H * 24 ))

	local __VAR="__DURATION_${__TAG}"
	echo -n "${!__VAR}"
}

#
# usage: secs_to_timestr SECONDS
#
# Converts a number of seconds into a timespec
# of the form:
#
#	  ${days}d${hours}h${mins}m${secs}s
#
# Only positive integers are supported. Note that
# all components are optional and will not be
# rendered if their quantity is 0
#
secs_to_timestr()
{
	local __STR="${1}"
	local __NUM="(0|[1-9][0-9]*)"

	[ -n "${__STR}" ] || return 1

	# If it's already a timestring,
	# then output it in lowercase
	[[ "${__STR^^}" =~ ^(${__NUM}D)?(${__NUM}H)?(${__NUM}M)?(${__NUM}S)?$ ]] && \
		echo -n "${__STR,,}" && return 0

	# It's not a timestring, so parse it
	[[ "${__STR}" =~ ^${__NUM}$ ]] || return 1

	local __RET=""
	local __SIZE=0
	local __MUL=0
	local __SECS=${__STR}
	local __C=""
	for __C in D H M S ; do
		__MUL=$(__get_time_mul "${__C}")
		(( __SIZE = ( __SECS / __MUL ) ))
		[ ${__SIZE} -gt 0 ] && __RET+="${__SIZE}${__C}"
		(( __SECS -= ( __SIZE * __MUL ) ))
	done

	echo -n ${__RET,,}
	return 0
}

#
# usage: timestr_to_secs TIMESPEC
#
# Converts a TIMESPEC of the form:
#
#	  ${days}d${hours}h${mins}m${secs}s
#
# To the total number of seconds it represents.
#
timestr_to_secs()
{
	local __STR="${1}"
	local __NUM="(0|[1-9][0-9]*)"

	# It could be a time string, so parse it out
	[ -n "${__STR}" ] || return 1

	# If it's already a number, then it's
	# a seconds count so output it verbatim
	[[ "${__STR}" =~ ^${__NUM}$ ]] && echo -n "${__STR}" && return 0

	# It's not a seconds count, so parse it!
	[[ "${__STR^^}" =~ ^(${__NUM}D)?(${__NUM}H)?(${__NUM}M)?(${__NUM}S)?$ ]] || return 1

	local __PARTS=( "${BASH_REMATCH[@]:1}" )
	[ ${#__PARTS[@]} -ge 1 ] || return 1

	local __SIZE=0
	local __MUL=0
	local __SECS=0
	local __i=0
	for (( __i = 0 ; __i < ${#__PARTS[@]} ; __i++ )) ; do
		[[ "${__PARTS[__i]}" =~ ^${__NUM}([DHMS])$ ]] || continue
		__SIZE=${BASH_REMATCH[1]}
		__MUL=$(__get_time_mul "${BASH_REMATCH[2]}")
		(( __SECS += __SIZE * __MUL ))
	done

	echo -n ${__SECS}
	return 0
}

#
# usage: is_valid_hostname HOSTNAME
#
# Check that the given hostname is valid as per RFC-1123,
# and return 0 if it is, or a non-0 status if it is not.
#
is_valid_hostname()
{
	local __HOSTNAME="${1}"
	[[ "${__HOSTNAME,,}" =~ ^([a-z0-9][-a-z0-9]*)?[a-z0-9]([.]([a-z0-9][-a-z0-9]*)?[a-z0-9])*$ ]] || return 1
	return 0
}

#
# usage: is_valid_port PORT
#
# Check that the given PORT is a number between
# 1 and 65535 (inclusive).
#
is_valid_port()
{
	local __PORT="${1}"
	[[ "${__PORT}" =~ ^(0|[1-9][0-9]*)$ ]] || return 1
	[ ${__PORT} -gt 0 ] || return 1
	[ ${__PORT} -lt 65536 ] || return 1
	return 0
}

#
# usage: is_valid_ipv4 IPADDRESS
#
# Checks that the given IPADDRESS is a valid
# IPv4 address (i.e. a 4-octet number).
#
is_valid_ipv4()
{
	local __IP="${1}"
	local __PARTS=()
	IFS="." __PARTS=(${__IP})

	# Is it made of 4 parts separated by dots?
	[ ${#__PARTS[@]} -eq 4 ] || return 1

	local __P=""
	for __P in "${__PARTS[@]}" ; do

		# Is it a 1-3 digit number?
		[[ "${__P}" =~ ^[0-9]{1,3}$ ]] || return 1

		# Don't allow leading zeros
		[[ "${__P}" =~ ^0[0-9]{1,2}$ ]] && return 1

		# Is it in [0..255]?
		[ ${__P} -ge 0 ] || return 1
		[ ${__P} -le 255 ] || return 1
	done

	# Checks out!
	return 0
}

#
# usage: render_password [LENGTH]
#
# Generate a password made of random alphanumeric
# characters (i.e. only letters and digits) of
# the given length (default if not given is 32).
#
render_password()
{
	local __LENGTH="${1:-}"

	[[ "${__LENGTH}" =~ ^[1-9][0-9]*$ ]] || __LENGTH=32

	local __V=""
	read __V __REST < <(tr -dc '[:alnum:]' < /dev/urandom | fold -w ${__LENGTH} | head -1)
	echo -n "${__V}"
}

#
# usage: ini_list_sections FILE
#
# List the sections (i.e. [section-name]...) from an INI file
#
ini_list_sections()
{
	local __FILE="${1}"
	is_file "${__FILE}" || return 1
	grep "^[[:space:]]*\[[^\]\+]" "${__FILE}" | sed -e 's/^\s*\[//g' -e 's/\].*$//g'
}

#
# usage: ini_has_section FILE SECTION
#
# Returns 0 if the INI file has the named section, non-0 otherwise
#
ini_has_section()
{
	local __FILE="${1}"
	local __SECTION="${2}"
	[ -n "${__SECTION}" ] || return 1
	ini_list_sections "${__FILE}" | grep -q "${__SECTION}"
}

#
# usage: ini_get_value FILE SECTION KEY
#
# Outputs the value corresponding to KEY in the
# given SECTION of the INI FILE. Returns non-0
# if the file doesn't exist, if the SECTION name
# is the empty string or doesn't exist, or if
# the KEY is the empty string.
#
ini_get_value()
{
	local __FILE="${1}"
	local __SECTION="${2}"
	local __KEY="${3}"

	[ -n "${__KEY}" ] || return 1
	ini_has_section "${__FILE}" "${__SECTION}" || return 1

	local __KVP="$(sed -nr "/^\s*\[${__SECTION}\]/,/\[/{/^\s*${__KEY}\s*=/p}" "${__FILE}" | tail -1)"
	echo -n "${__KVP#*=}" | sed -e 's;^[[:space:]]*;;g' -e 's;[[:space:]]*$;;g'
}

#
# usage: urlencode STRING
#
# Encode the given string using the URLEncode mechanism
#
urlencode()
{
	local __STR="${1}"
	local __SLASH="${2:-true}"
	local __LEN=${#__STR}

	local __POS=0
	local __C=""
	local __O=""
	local __RESULT=""

	for (( __POS=0 ; __POS < __LEN ; __POS++ )); do
		__C="${__STR:${__POS}:1}"
		case "${__C}" in
			/ ) as_boolean "${__SLASH}" && __O="%2F" || __O="/" ;;
			[-_.~a-zA-Z0-9] ) __O="${__C}" ;;
			* ) printf -v __O '%%%02x' "'${__C}" ; __O="${__O^^}" ;;
		esac
		__RESULT+="${__O}"
	done
	echo -n "${__RESULT}"
}

#
# usage: urlencode_path STRING
#
# Encode the given string using the URLEncode mechanism, with
# one deviation: slashes (/) aren't encoded as %2F.
#
urlencode_path()
{
	urlencode "${1}" "false"
}

#
# usage: urlencode_query STRING
#
# Encode the given string using the URLEncode mechanism for URL Queries (i.e. spaces == '+')
#
urlencode_query()
{
	local __STR="$(urlencode "${1}")"
	echo -n "${__STR//%20/+}"
}

#
# usage: urldecode STRING
#
# Decode the given string using the URLDecode mechanism
#
urldecode()
{
	local __STR="${1//+/ }"
	printf "%b" "${__STR//%/\\x}"
}

#
# usage: urldecode_query STRING
#
# Decode the given string using the URLDecode mechanism for URL Queries (i.e. spaces == '+')
#
urldecode_query()
{
	urldecode "${@}"
}

#
# usage: xml_escape STRING
#
# Encode the given string using the XML escape mechanism
#
xml_escape()
{
	local __V="${1}"
	__V="${__V//&/&amp;}"
	__V="${__V//</&lt;}"
	__V="${__V//>/&gt;}"
	__V="${__V//\"/&quot;}"
	__V="${__V//\'/&apos;}"
	echo -n "${__V}"
}

#
# usage: xml_unescape STRING
#
# Dencode the given string using the XML unescape mechanism
#
xml_unescape()
{
	local __V="${1}"
	__V="${__V//&lt;/<}"
	__V="${__V//&gt;/>}"
	__V="${__V//&quot;/\"}"
	__V="${__V//&apos;/\'}"
	__V="${__V//&amp;/&}"
	echo -n "${__V}"
}

#
# usage: execute COMMAND [ARGS...]
#
# Run the given command using an exec call, with the given arguments
#
execute()
{
	[ ${#} -gt 0 ] || fail "No command given to execute"
	running "${@@Q}"
	exec "${@}"
}

#
# usage: sanitize_pathspec PATHSPEC [SEP]
#
# Sanitizes a path chain specification (i.e.
# a series of paths separated by SEP) such
# that every element exists only once, there
# are no leading or trailing separators, and no
# double-separators.
#
# The default separator is the colon (:).
#
sanitize_pathspec()
{
	local __LP="${1}"
	local __SEP="${2:-:}"
	local __L="$(tr "${__SEP}" '\n' <<< "${__LP}" | sort -u | sed -e '/^\s*$/d')"
	local __A=()
	IFS=":" read -a __A <<< "${__LP}" || true
	local __FIRST="true"
	local __n=""
	for __n in "${__A[@]}" ; do
		grep -q "^${__n}$" <<< "${__L}" || continue
		[ -n "${__n}" ] || continue
		${__FIRST} || echo -n "${__SEP}"
		echo -n "${__n}"
		__L="$(grep -v "^${__n}$" <<< "${__L}")"
		__FIRST="false"
	done
}

#
# usage: read_setting SETTING_NAME [DEFAULT]
#
# Reads the value of a setting with the given name. If the
# setting is an environment variable, its value will be returned.
# Otherwise, if the variable SECRETS_DIR is set and points
# to a directory which contains a regular file with the same
# name as the setting, then its contents will be returned.
#
# Otherwise, the DEFAULT will be returned.
#
read_setting()
{
	local __SETTING="${1}"
	local __DEFAULT="${2:-}"

	local __RESULT="${__DEFAULT}"

	if [ -v "${__SETTING}" ] ; then
		# It's an envvar!! use it!
		__RESULT="${!__SETTING}"
	elif [ -v SECRETS_DIR ] ; then
		if [ -d "${SECRETS_DIR}" ] ; then
			# No envvar? What about a secret file?
			local __FILE="${SECRETS_DIR}/${__SETTING}"
			is_file_readable "${__FILE}" && __RESULT="$(<"${__FILE}")"
		fi
	fi

	# Return the final value
	echo -en "${__RESULT}"
	return 0
}

#
# usage: redirect_logs LOG_FILE
#
# Send a copy of STDOUT and STDERR to the given
# file using tee and redirection
#
redirect_logs()
{
	local __LOG="${1}"
	local __DIR="$(dirname "${__LOG}")"

	if ! is_dir_readwrite "${__DIR}" ; then
		warn "Could not redirect the logs to [${__LOG}]: $(dir_error "${__DIR}" "${?}")"
		return 0
	fi

	exec >> >(tee -a --output-error=exit "${__LOG}")
	exec 2>&1
	say "Logs redirected to [${__LOG}]"
}

__ssl()
{
	local OP="${1}"
	set_or_default SSL_DIR "/.ssl"
	export SSL_DIR
	"/usr/local/bin/acme-${OP}"
}

#
# usage: init_ssl
#
# Initialize the SSL layer
#
init_ssl()
{
	__ssl init
}

#
# usage: check_ssl
#
# Check the status of the SSL layer
#
check_ssl()
{
	__ssl validate
}

__poll_url()
{
	local __INSECURE="${1}"
	shift

	as_boolean "${__INSECURE}" && __INSECURE="-k"

	local __URL="${1}"

	local __MAX_WAIT="${2:-"5m"}"
	if [[ ! "${__MAX_WAIT}" =~ ^[1-9][0-9]*$ ]] ; then
		# If the conversion doesn't work, use the default 5 minute clock
		__MAX_WAIT="$(timestr_to_secs "${__MAX_WAIT}")" || __MAX_WAIT="300"
	fi
	local __MAX_WAIT_STR="$(secs_to_timestr "${__MAX_WAIT}")"

	local __POLL_WAIT="${3:-"1"}"

	local __START="$(date +%s)"
	waiting "Starting the polling cycle for [${__URL}] (for up to ${__MAX_WAIT_STR})..."
	local __NOW="${__START}"
	local __DURATION="0"
	while true ; do
		curl ${__INSECURE} -fsSL -m 5 "${__URL}" &>/dev/null && break

		__NOW="$(date +%s)"
		__DURATION=$(( __NOW - __START )) || true

		if [ ${__DURATION} -ge ${__MAX_WAIT} ] ; then
			err "Timed out waiting for the URL [${__URL}] to come up (waited for ${__MAX_WAIT_STR})"
			return 1
		fi
		# If sleep didn't succeed, it means it got signaled, which
		# Means we need to stop what we're doing and puke out
		if ! sleep ${__POLL_WAIT} ; then
			err "Sleep interrupted, can't continue polling (elapsed: $(secs_to_timestr "${__DURATION}"))"
			return 1
		fi
	done
	__NOW="$(date +%s)"
	__DURATION="$(secs_to_timestr "$(( __NOW - __START ))")"
	ok "The URL [${__URL}] responded after ${__DURATION:-0s}"
	return 0
}

#
# usage: poll_url URL [MAX_WAIT [POLL_WAIT]]
#
# Poll the given URL with cURL, for at most
# MAX_WAIT interval (may be specified as a time
# string or the number of seconds, default 5
# minutes), sleeping for POLL_WAIT (default 1)
# between polling attempts.
#
poll_url()
{
	__poll_url false "${@}"
}

#
# usage: poll_url_insecure URL [MAX_WAIT [POLL_WAIT]]
#
# Same as poll_url but the server's certificate
# validity will not be checked.
#
poll_url_insecure()
{
	__poll_url true "${@}"
}
